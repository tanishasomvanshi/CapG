using System;
using System.Reflection;
using SampleNamespace;

namespace assemblyExample
{
    class Program
    {
        static void Main()
        {
            Customer customer = new Customer();
            customer.CustomerID = 100;
            customer.CustomerName = "ABC";
            //Console.WriteLine(customer.CustomerName);
            //Console.WriteLine(customer.CustomerID);

            Console.WriteLine(customer.GetCustomerNameUpperCase());

            /* Reflection*/ //Extreme rare cases it is used
            Assembly assembly = Assembly.GetAssembly(typeof(Customer));
            Console.WriteLine("Full Name: " + assembly.FullName);
            Console.WriteLine("Code Base: " + assembly.CodeBase);

            Type[] classes = assembly.GetTypes();
            foreach (Type cls in classes)
            {
                Console.WriteLine(cls.Name);
                Console.WriteLine(cls.FullName);
                Console.WriteLine("\nProperties: ");
                foreach (PropertyInfo prop in cls.GetProperties())
                {
                    Console.WriteLine(prop);
                }
                Console.WriteLine("\nMethods: ");
                foreach (MethodInfo met in cls.GetMethods())
                {
                    Console.WriteLine(met);
                }

                Console.WriteLine("\nFields: ");
                foreach (FieldInfo fil in cls.GetFields())
                {
                    Console.WriteLine(fil);
                }

                Console.WriteLine("\nAttributes: ");
                foreach (Attribute atr in cls.GetCustomAttributes())
                {
                    Console.WriteLine(atr);
                }
            }//only public members are visible
            Console.ReadKey();
        }
    }
}

//Class1
using System;
using System.Reflection;

namespace SampleNamespace
{
    public class SampleAttribute : Attribute
    {
       public SampleAttribute()
       {
            Console.WriteLine("Constructor of SampleAttribute");
        }
    }
    
    [SampleAttribute]//Can also write just [Sample]

    public class Customer
    {  
        public int x;

        public int CustomerID { get; set; }
        public string CustomerName { get; set; }

        public string GetCustomerNameUpperCase()
        {
            Type type = typeof(Customer);
            if (type.GetCustomAttribute(typeof(SampleAttribute)) != null)
            {
                return CustomerName.ToUpper();
            }
            else
            {
                return CustomerName.ToLower();
            }
        }
    }
}
